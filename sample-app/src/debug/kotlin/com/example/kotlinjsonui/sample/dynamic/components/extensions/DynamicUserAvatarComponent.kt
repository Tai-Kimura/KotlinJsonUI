package com.example.kotlinjsonui.sample.dynamic.components.extensions

import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import com.google.gson.JsonObject
import com.google.gson.JsonElement
import androidx.compose.ui.text.style.TextAlign
import com.kotlinjsonui.dynamic.helpers.ModifierBuilder
import com.example.kotlinjsonui.sample.extensions.UserAvatar

/**
 * Dynamic wrapper for UserAvatar component
 * Auto-generated by kjui converter generator
 */
object DynamicUserAvatarComponent {
    @Composable
    fun create(
        json: JsonObject,
        data: Map<String, Any> = emptyMap()
    ) {
        // Parse attributes
        val name = parseString(json.get("name"), data)
        val avatarUrl = parseString(json.get("avatarUrl"), data)
        val size = parseInt(json.get("size"), data)
        val isOnline = parseBoolean(json.get("isOnline"), data)
        
        // Build modifier
        val modifier = ModifierBuilder.buildModifier(json)
        
        // Call the custom component
        UserAvatar(
            name = name ?: "",
            avatarUrl = avatarUrl ?: "",
            size = size ?: 0,
            isOnline = isOnline ?: false,
            modifier = modifier
        )
    }
    
private fun parseString(element: com.google.gson.JsonElement?, data: Map<String, Any>): String? {
    if (element == null || element.isJsonNull) return null
    
    val value = element.asString
    
    // Check for binding
    if (value.startsWith("@{") && value.endsWith("}")) {
        val propertyName = value.substring(2, value.length - 1)
        return data[propertyName]?.toString()
    }
    
    return value
}


private fun parseInt(element: com.google.gson.JsonElement?, data: Map<String, Any>): Int? {
    if (element == null || element.isJsonNull) return null
    
    if (element.isJsonPrimitive) {
        val primitive = element.asJsonPrimitive
        if (primitive.isNumber) {
            return primitive.asInt
        } else if (primitive.isString) {
            val value = primitive.asString
            // Check for binding
            if (value.startsWith("@{") && value.endsWith("}")) {
                val propertyName = value.substring(2, value.length - 1)
                return (data[propertyName] as? Number)?.toInt()
            }
            return value.toIntOrNull()
        }
    }
    
    return null
}


private fun parseBoolean(element: com.google.gson.JsonElement?, data: Map<String, Any>): Boolean? {
    if (element == null || element.isJsonNull) return null
    
    if (element.isJsonPrimitive) {
        val primitive = element.asJsonPrimitive
        if (primitive.isBoolean) {
            return primitive.asBoolean
        } else if (primitive.isString) {
            val value = primitive.asString
            // Check for binding
            if (value.startsWith("@{") && value.endsWith("}")) {
                val propertyName = value.substring(2, value.length - 1)
                return data[propertyName] as? Boolean
            }
            return value.toBooleanStrictOrNull()
        }
    }
    
    return null
}

}
