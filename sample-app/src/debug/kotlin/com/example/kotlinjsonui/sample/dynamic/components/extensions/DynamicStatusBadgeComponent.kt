package com.example.kotlinjsonui.sample.dynamic.components.extensions

import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import com.google.gson.JsonObject
import com.google.gson.JsonElement
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.graphics.Color
import com.kotlinjsonui.dynamic.helpers.ModifierBuilder
import com.example.kotlinjsonui.sample.extensions.StatusBadge

/**
 * Dynamic wrapper for StatusBadge component
 * Auto-generated by kjui converter generator
 */
object DynamicStatusBadgeComponent {
    @Composable
    fun create(
        json: JsonObject,
        data: Map<String, Any> = emptyMap()
    ) {
        // Parse attributes
        val title = parseString(json.get("title"), data)
        val status = parseString(json.get("status"), data)
        val color = parseColor(json.get("color"), data)
        val count = parseInt(json.get("count"), data)
        
        // Build modifier
        val modifier = ModifierBuilder.buildModifier(json)
        
        // Call the custom component
        StatusBadge(
            title = title ?: "",
            status = status ?: "",
            color = color ?: androidx.compose.ui.graphics.Color.Unspecified,
            count = count ?: 0,
            modifier = modifier
        )
    }
    
private fun parseString(element: com.google.gson.JsonElement?, data: Map<String, Any>): String? {
    if (element == null || element.isJsonNull) return null
    
    val value = element.asString
    
    // Check for binding
    if (value.startsWith("@{") && value.endsWith("}")) {
        val propertyName = value.substring(2, value.length - 1)
        return data[propertyName]?.toString()
    }
    
    return value
}


private fun parseColor(element: com.google.gson.JsonElement?, data: Map<String, Any>): Color? {
    if (element == null || element.isJsonNull) return null
    
    if (element.isJsonPrimitive && element.asJsonPrimitive.isString) {
        val value = element.asString
        
        // Check for binding
        if (value.startsWith("@{") && value.endsWith("}")) {
            val propertyName = value.substring(2, value.length - 1)
            val boundValue = data[propertyName]?.toString()
            return boundValue?.let { parseColorString(it) }
        }
        
        return parseColorString(value)
    }
    
    return null
}

private fun parseColorString(value: String): Color? {
    return if (value.startsWith("#")) {
        try {
            Color(android.graphics.Color.parseColor(value))
        } catch (e: Exception) {
            null
        }
    } else {
        null
    }
}


private fun parseInt(element: com.google.gson.JsonElement?, data: Map<String, Any>): Int? {
    if (element == null || element.isJsonNull) return null
    
    if (element.isJsonPrimitive) {
        val primitive = element.asJsonPrimitive
        if (primitive.isNumber) {
            return primitive.asInt
        } else if (primitive.isString) {
            val value = primitive.asString
            // Check for binding
            if (value.startsWith("@{") && value.endsWith("}")) {
                val propertyName = value.substring(2, value.length - 1)
                return (data[propertyName] as? Number)?.toInt()
            }
            return value.toIntOrNull()
        }
    }
    
    return null
}

}
