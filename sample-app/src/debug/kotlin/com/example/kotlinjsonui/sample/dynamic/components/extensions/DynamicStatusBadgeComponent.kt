package com.example.kotlinjsonui.sample.dynamic.components.extensions

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import com.google.gson.JsonObject
import com.kotlinjsonui.dynamic.DynamicView
import com.kotlinjsonui.dynamic.helpers.ModifierBuilder
import androidx.compose.ui.text.style.TextAlign

/**
 * Dynamic StatusBadge Component
 * Generated by kjui converter generator
 * 
 * Supported JSON attributes:
 * - child/children: Array of child components
 * - title: String
 * - status: String
 * - color: Color
 * - count: Int
 */
class DynamicStatusBadgeComponent {
    companion object {
        @Composable
        fun create(
            json: JsonObject,
            data: Map<String, Any> = emptyMap()
        ) {
            // Parse parameters
            val title = parseString(json.get("title"), data)
            val status = parseString(json.get("status"), data)
            val color = parseColor(json.get("color"), data)
            val count = parseInt(json.get("count"), data)
            
            // Check if this is a container
            val children = json.get("children")?.asJsonArray 
                ?: json.get("child")?.asJsonArray
            val isContainer = children != null && children.size() > 0
            
            // Build modifier
            val modifier = ModifierBuilder.buildModifier(json)
            
            if (isContainer) {
                // Container component with children
                Box(modifier = modifier) {
                    children?.forEach { childJson ->
                        if (childJson.isJsonObject) {
                            DynamicView(
                                json = childJson.asJsonObject,
                                data = data
                            )
                        }
                    }
                }
            } else {
                // Non-container component
                Box(modifier = modifier) {
                    // TODO: Implement custom component logic
                    Text("StatusBadge")
                }
            }
        }
        
private fun parseString(element: com.google.gson.JsonElement?, data: Map<String, Any>): String? {
    if (element == null || element.isJsonNull) return null
    
    val value = element.asString
    
    // Check for binding
    if (value.startsWith("@{") && value.endsWith("}")) {
        val propertyName = value.substring(2, value.length - 1)
        return data[propertyName]?.toString()
    }
    
    return value
}


private fun parseColor(element: com.google.gson.JsonElement?, data: Map<String, Any>): Color? {
    if (element == null || element.isJsonNull) return null
    
    if (element.isJsonPrimitive && element.asJsonPrimitive.isString) {
        val value = element.asString
        
        // Check for binding
        if (value.startsWith("@{") && value.endsWith("}")) {
            val propertyName = value.substring(2, value.length - 1)
            val boundValue = data[propertyName]?.toString()
            return boundValue?.let { parseColorString(it) }
        }
        
        return parseColorString(value)
    }
    
    return null
}

private fun parseColorString(value: String): Color? {
    return if (value.startsWith("#")) {
        try {
            Color(android.graphics.Color.parseColor(value))
        } catch (e: Exception) {
            null
        }
    } else {
        null
    }
}


private fun parseInt(element: com.google.gson.JsonElement?, data: Map<String, Any>): Int? {
    if (element == null || element.isJsonNull) return null
    
    if (element.isJsonPrimitive) {
        val primitive = element.asJsonPrimitive
        if (primitive.isNumber) {
            return primitive.asInt
        } else if (primitive.isString) {
            val value = primitive.asString
            // Check for binding
            if (value.startsWith("@{") && value.endsWith("}")) {
                val propertyName = value.substring(2, value.length - 1)
                return (data[propertyName] as? Number)?.toInt()
            }
            return value.toIntOrNull()
        }
    }
    
    return null
}

    }
}
